name: Build & Deploy

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'Cargo.toml'

permissions:
  id-token: write
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-push:
    name: Build and Push Image to ECR
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION:      ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID:  ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY:  ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG:       ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login \
                --username AWS \
                --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build Docker image
        run: docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

      - name: Tag Docker image
        run: |
          docker tag \
            $ECR_REPOSITORY:$IMAGE_TAG \
            $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push to ECR
        run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Increment version in Cargo.toml
        run: |
          # Extract the current version from Cargo.toml
          current_version=$(grep '^version =' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $current_version"

          # Split the version into its components
          IFS='.' read -r major minor patch <<< "$current_version"

          # Increment the patch version
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"
          echo "New version: $new_version"

          # Update the version in Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$new_version\"/" Cargo.toml

          # Commit the updated Cargo.toml
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add Cargo.toml
          git commit -m "Increment version to $new_version"
          git push

  deploy:
    needs: build-and-push
    name: Deploy to Elastic Beanstalk
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EB_APP_NAME: ${{ secrets.EB_APP_NAME }}
      EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}
      EB_S3_BUCKET: ${{ secrets.EB_S3_BUCKET }}
      ECR_REGISTRY_URI: ${{ secrets.ECR_REGISTRY_URI }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Generate Dockerrun.aws.json
        run: |
          cat <<EOF > Dockerrun.aws.json
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ env.ECR_REGISTRY_URI }}:${{ github.sha }}",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": 8000
              }
            ],
            "Volumes": [],
            "Logging": "/var/log/containers"
          }
          EOF
          echo "Generated Dockerrun.aws.json:"
          cat Dockerrun.aws.json

      - name: Zip deployment bundle
        run: zip -r deploy.zip Dockerrun.aws.json

      - name: Upload bundle to S3
        run: |
          aws s3 cp deploy.zip s3://${{ env.EB_S3_BUCKET }}/deploy-bundles/${{ github.sha }}.zip
          echo "Uploaded deploy.zip to s3://${{ env.EB_S3_BUCKET }}/deploy-bundles/${{ github.sha }}.zip"

      - name: Register new EB application version
        run: |
          # Generate a unique version label based on timestamp and commit SHA
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          VERSION_LABEL="${TIMESTAMP}-${{ github.sha }}"
          echo "Generated EB Version Label: $VERSION_LABEL"
          # Store the version label in the GitHub Actions environment for the next step
          echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV

          aws elasticbeanstalk create-application-version \
            --application-name ${{ env.EB_APP_NAME }} \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="${{ env.EB_S3_BUCKET }}",S3Key="deploy-bundles/${{ github.sha }}.zip" \
            --region ${{ env.AWS_REGION }}

      - name: Deploy to EB environment
        run: |
          echo "Deploying version ${{ env.VERSION_LABEL }} to environment ${{ env.EB_ENV_NAME }}"
          aws elasticbeanstalk update-environment \
            --environment-name ${{ env.EB_ENV_NAME }} \
            --version-label "${{ env.VERSION_LABEL }}"
            # You might add --timeout or wait commands here for production to wait for deployment success/failure
            # e.g., --region ${{ env.AWS_REGION }} && aws elasticbeanstalk wait environment-updated --application-name ${{ env.EB_APP_NAME }} --version-label "${{ env.VERSION_LABEL }}" --region ${{ env.AWS_REGION }}
